SET A:
1) Write a C program to implement a singly linked list with Create and Display operation.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<stdio.h>
#include<malloc.h>
struct node{
	int data;
	struct node* next;
};
struct node* create(struct node* head)
{
	int i,n;
	struct node* newnode,*temp;
	printf("\n Enter Limit :");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("\n Enter Value :");
		scanf("%d",&(newnode->data));
		newnode->next=NULL;
		if(head==NULL)
		{
			head=newnode;
			temp=newnode;
		}
		else
		{
			temp->next=newnode;
			temp=newnode;
		}
	}
	return head;
}

void dis(struct node* head)
{
	struct node* temp;
	for(temp=head;temp!=NULL;temp=temp->next)
	{
		printf("%d\t",temp->data);
	}
}
int main()
{
	int num,pos,ch;
	struct node* head=NULL;
                  head=create(head);
                   dis(head);
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) Write a C program to implement a Circular Singly linked list with Create and Display operation.
#include <stdio.h>
#include <stdlib.h>
struct node {
    int data;
    struct node* next;
};
struct node* create(struct node* head)
 {
    int i, n;
    struct node* newnode, * temp;
    printf("\n Enter limit :");
    scanf("%d",&n);
    for(i=0;i<n;i++)
	{
        newnode = (struct node*)malloc(sizeof(struct node));
         printf("\n Enter Value :");
        scanf("%d",&(newnode->data));
        newnode->next = NULL;
        if (head == NULL)
		 {
            head = newnode;
            temp = newnode;
        } 
		else 
		{
            temp->next = newnode;
            temp = newnode;
        }
    }
    if (temp != NULL) 
	{
        temp->next = head;
    }
    return head;
}

void dis(struct node* head) 
{
    struct node* temp= head;
    do{
      printf("%d\t", temp->data);
      temp=temp->next;
    }while(temp!= head);
}


int main() 
{
    struct node* head = NULL;
    head = create(head);
    dis(head);
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3) Write a C program to implement a doubly linked list with Create and Display operation.

#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node* next,*prev;
};
struct node *create(struct node* head)
{
	int i,n;
	struct node* temp,*newnode;
	printf("\n Enter A Limit ...");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("Enter Value ..");
		scanf("%d",&newnode->data);
		if(head==NULL)
		{
			head=temp=newnode;
			newnode->next=head;
			head->prev=newnode;
		}
		else
		{
		   temp->next=newnode;
		   newnode->prev=temp;
		   temp=newnode;
		   temp->next=head;
		   head->prev=temp;
		}
	}
	return head;
}

void display(struct node* head)
{
	struct node* temp=head;
	do{
		printf("%d\t",temp->data);
		temp=temp->next;
	  }while(temp!=head);
	
}
int main()
{
	struct node* head=NULL;
	head=create(head);
	display(head);
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4) Write a C program to implement a Circular doubly linked list with Create and Display operation
#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node* next,*prev;
};
struct node *create(struct node* head)
{
	int i,n;
	struct node* temp,*newnode;
	printf("\n Enter A Limit ...");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("Enter Value ..");
		scanf("%d",&newnode->data);
		if(head==NULL)
		{
			head=temp=newnode;
			newnode->next=head;
			head->prev=newnode;
		}
		else
		{
		   temp->next=newnode;
		   newnode->prev=temp;
		   temp=newnode;
		   temp->next=head;
		   head->prev=temp;
		}
	}
	return head;
}

void display(struct node* head)
{
	struct node* temp=head;
	do{
		printf("%d\t",temp->data);
		temp=temp->next;
	  }while(temp!=head);
	
}
int main()
{
	struct node* head=NULL;
	head=create(head);
	display(head);
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SET B:
1) Implement the following programs by adding the functions one by one in SET A(Question1)
i) To count total number of nodes and display the count.
ii) To insert node at the start. 
iii) To reverse the Linked List and display both the list
#include<stdio.h>
#include<malloc.h>
struct node{
	int data;
	struct node* next;
};
struct node* create(struct node* head)
{
	int i,n;
	struct node* newnode,*temp;
	printf("\n Enter Limit :");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("\n Enter Value :");
		scanf("%d",&(newnode->data));
		newnode->next=NULL;
		if(head==NULL)
		{
			head=newnode;
			temp=newnode;
		}
		else
		{
			temp->next=newnode;
			temp=newnode;
		}
	}
	return head;
}

void dis(struct node* head)
{
	struct node* temp;
	for(temp=head;temp!=NULL;temp=temp->next)
	{
		printf("%d\t",temp->data);
	}
}

int ser_node(struct node* head,int num,int pos=0)
{
	struct node* temp;
	for(temp=head;temp!=NULL;temp=temp->next)
	 {
	 	if(temp->data==num)
	 	{
	 		printf("\n Number Is Present :%d",num);
	 		return 1;
		 }
	 }
	 printf("\n Number NOT Present:%d",num);
	 return 0;
}

struct node* insert_end(struct node* head,int num)
{
	struct node* newnode,*temp;
	newnode=(struct node*)malloc(sizeof(struct node));
	newnode->data=num;
	newnode->next=NULL;
	for(temp=head;temp->next!=NULL;temp=temp->next);
	temp->next=newnode;
	return head;
}

int main()
{
	int num,pos,ch;
	struct node* head=NULL;
do{
	printf("\n 1. Create Link list :");
	printf("\n 2. Display Link list :");
	printf("\n 3. Search No to Link list :");
	printf("\n 4. Insert At End :");
	printf("\n Enter Choice :");
	scanf("%d",&ch);
	switch(ch)
	{
	case 1:head=create(head);
	        break;
	case 2:dis(head);
	       break;  	
	case 3:printf("\n Enter Number To search :");
	        scanf("%d",&num);
	        ser_node(head,num);
	        break;
	case 4:printf("\n Enter Number To END :");
	       scanf("%d",&num);
	       head=insert_end(head,num);
	       break;
	
	 default:printf("\n Invalid choice...........");      
}
    }while(ch<5);
}


#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<malloc.h>
struct node{
 clrscr();
 int data;
 struct node *next;
};
 struct node* create(struct node* head)
 {
  int i,n;
  struct node* newnode,*temp;
  printf("\n Enter A Limit...:");
  scanf("%d",&n);
  for(i=0;i<n;i++)
  {
   newnode=(struct node*)malloc(sizeof(struct node));
   printf("Enter A value....:");
   scanf("%d",&newnode->data);
   newnode->next=NULL;
   if(head==NULL)
   {
     head=newnode;
     temp=newnode;
   }
   else
   {
     temp->next=newnode;
     temp=newnode;
   }
  }
  return head;
 }
 void dis(struct node* head)
 {
   struct node* temp;
   for(temp=head;temp!=NULL;temp=temp->next)
   {
    printf("%d\t",temp->data);
   }
 }
 struct node* insert_beg(struct node* head,int num)
 {
   struct node* newnode,*temp;
   newnode=(struct node*)malloc(sizeof(struct node));
   newnode->data=num;
   newnode->next=head;
   head=newnode;
   return head;
 }
 struct node* insert_end(struct node* head,int num)
 {
  struct node* newnode,*temp;
  newnode=(struct node*)malloc(sizeof(struct node));
  newnode->data=num;
  for(temp=head;temp->next!=NULL;temp=temp->next);
  newnode->next=NULL;
  temp->next=newnode;
  return head;
 }
 struct node* insert_mid(struct node* head,int num,int pos)
 {
  int i;
  struct node* newnode,*temp,*next;
  newnode=(struct node*)malloc(sizeof(struct node));
  newnode->data=num;
  newnode->next=NULL;
  for(i=1,temp=head;i<pos-1 &&temp->next!=NULL; i++,temp=temp->next);
  newnode->next=temp->next;
   temp->next=newnode;
   return head;
 }
 struct node* del_Beg(struct node* head)
 {
   struct node* temp;
   temp=head;
   head=head->next;
   free(temp);
   return head;
 }
  struct node* del_specific(struct node* head,int pos)
  {
    struct node* temp,*temp1;
    int i;
    for(i=1,temp=head;i<pos-1 && temp->next!=NULL;i++,temp=temp->next);
    temp1=temp->next;
    temp->next=temp1->next;
    free(temp1);
    return head;
  }
  struct node* del_end(struct node* head)
  {
  	struct node* temp,*temp1;
  	for(temp=head;temp->next->next!=NULL;temp=temp->next);
  	temp1=temp->next;
  	temp->next=NULL;
  	free(temp1);
  	return head;
  }

 int main()
 {
  int num,pos,ch;
  struct node* head=NULL;
  do{
  	printf("\n 1.create Node..");
  	printf("\n 2.Display Node..");
  	printf("\n 3.Insert At Beginig Node..");
  	printf("\n 4.Insert At End Node..");
  	printf("\n 5.Insert At Middle Node..");
  	printf("\n 6.Deleate Starting Node..");
  	printf("\n 7.Deleate Specific Position Node..");
  	printf("\n 8.Deleate End Node..");
  	printf("\n Enter A choice...:");
  	scanf("%d",&ch);
  	switch(ch)
{
  case 1:head=create(head);
        break;
  case 2:dis(head);
        break;
  case 3:printf("\n Enter A Number ..:");
  scanf("%d",&num);
  head=insert_beg(head,num);
       break;

  case 4:printf("\n Enter A Number ..:");
         scanf("%d",&num);
         head=insert_end(head,num);
         break;

  case 5:printf("\n Enter A Number ..:");
        scanf("%d",&num);
        printf("\n Enter A Position : ");
        scanf("%d",&pos);
        head=insert_mid(head,num,pos);
        break;


  case 6:head=del_Beg(head);
         break;
  case 7:printf("\n Enter A Position : ");
        scanf("%d",&pos);
        head=del_specific(head,pos);
        break;
  
  case 8:head=del_end(head);
        break;
   default:printf("\n Invalid Choice.....");     
}
}while(ch<9);
  getch();
  return 0;
 }
#include<stdio.h>
#include<malloc.h>
struct node{
	int data;
	struct node* next;
};
struct node* create(struct node* head)
{
	int i,n;
	struct node *newnode,*temp;
	printf("\n Enter Limit :");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("\n Enter Value :");
		scanf("%d",&(newnode->data));
		newnode->next=NULL;
		if(head==NULL)
		{
			head=newnode;
			temp=newnode;
		}
		else
		{
			temp->next=newnode;
			temp=newnode;
		}
	}
	return head;
}
struct node *swap(struct node*head,int m,int n)
{
	struct node* temp1,*temp2;
	int i,t;
	for(i=1,temp1=head;i<m &&temp1!=NULL;i++,temp1=temp1->next);
	for(i=1,temp2=head;i<n &&temp2!=NULL;i++,temp2=temp2->next);
	t=temp1->data;
	temp1->data=temp2->data;
	temp2->data=t;
	return head;
}

void dis(struct node* head)
{
	struct node* temp;
	for(temp=head;temp!=NULL;temp=temp->next)
	{
		printf("%d\t",temp->data);
	}
}
int main()
{
	int n,m;
	struct node* head=NULL;
	head=create(head);
	dis(head);
	printf("\n Enter m Position :");
	scanf("%d",&m);
	printf("\n Enter n Position :");
	scanf("%d",&n);
	head=swap(head,m,n);
	dis(head);
}

#include<stdio.h>
#include<malloc.h>
struct node{
	int data;
	struct node* next;
};
struct node* create(struct node* head)
{
	int i,n;
	struct node* newnode,*temp;
	printf("\n Enter Limit :");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("\n Enter Value :");
		scanf("%d",&(newnode->data));
		newnode->next=NULL;
		if(head==NULL)
		{
			head=newnode;
			temp=newnode;
		}
		else
		{
			temp->next=newnode;
			temp=newnode;
		}
	}
	return head;
}

void dis(struct node* head)
{
	struct node* temp;
	for(temp=head;temp!=NULL;temp=temp->next)
	{
		printf("%d\t",temp->data);
	}
}

int ser_node(struct node* head,int num,int pos=0)
{
	struct node* temp;
	for(temp=head;temp!=NULL;temp=temp->next)
	 {
	 	if(temp->data==num)
	 	{
	 		printf("\n Number Is Present :%d",num);
	 		return 1;
		 }
	 }
	 printf("\n Number NOT Present:%d",num);
	 return 0;
}

int main()
{
	int num,pos,ch;
	struct node* head=NULL;
    head=create(head);
    dis(head);	       	
    printf("\n Enter Number To search :");
	scanf("%d",&num);
	ser_node(head,num);
	        
}

3) Write a ‘C’ program to sort elements of a singly linked list in ascending order and display the sorted List

#include<stdio.h>
#include<malloc.h>
struct node{
int data;
struct node* next;
};
struct node* create(struct node* head)
{
 int i,n;
 struct node* newnode,*temp;
printf("\n Enter limit :");
scanf("%d",&n);
for(i=0;i<n;i++)
{
newnode=(struct node*)malloc(sizeof(struct node));
printf("\n Enter Value :");
scanf("%d",&(newnode->data));
newnode->next=NULL;
if(head==NULL)
{
head=newnode;
temp=newnode;
}
else
{
temp->next=newnode;
temp=newnode;
}
}
return head;
}

void dis(struct node* head)
{
struct node* temp;
  for(temp=head;temp!=NULL;temp=temp->next)
{
  printf("%d\t",temp->data);
}
}
void Bubble_sort(struct node* head)
{
	struct node* pass,*i;
	int t;
	
	for(pass=head;pass!=NULL;pass=pass->next)
	{
		for(i=head;i->next!=NULL;i=i->next)
		{
			if(i->data > i->next->data)
			{
            t=i->data;
			i->data = i->next->data;
			i->next->data = t;
		    }
		}
	}
}
int main()
{
  struct node* head=NULL;
  head=create(head);
  dis(head);
  printf("\n Ascending Order :");
  Bubble_sort(head);
  dis(head);
}
---------------------------------------------------------------------------------------------------------------------------------------------------
4) Write a ‘C’ program to create doubly link list and display nodes having odd value.
#include<stdio.h>
#include<malloc.h>
struct node{
	int data;
	struct node* next;
};
struct node* create(struct node* head)
{
	int i,n;
	struct node* newnode,*temp;
	printf("\n Enter Limit :");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		newnode=(struct node*)malloc(sizeof(struct node));
		printf("\n Enter Value :");
		scanf("%d",&(newnode->data));
		newnode->next=NULL;
		if(head==NULL)
		{
			head=newnode;
			temp=newnode;
		}
		else
		{
			temp->next=newnode;
			temp=newnode;
		}
	}
	return head;
}

void dis(struct node* head)
{
	struct node* temp;
	for(temp=head;temp!=NULL;temp=temp->next)
	{
		printf("%d\t",temp->data);
	}
}
void odd_count(struct node* head)
{
	struct node* temp;
	int cnt=0;
	for(temp=head;temp!=NULL;temp=temp->next)
		if(temp->data %2==1)
		{
		printf("%d\t",temp->data);
	    }
	    
}

int main()
{
	int num;
	struct node* head=NULL;
	head=create(head);
	dis(head);
	printf("\n Total Odd value :");
	odd_count(head);
}

------------------------------------------------------------------------------------------------------------------------------------------------------
SET C: 
1) Write a C program to find intersection of two singly linked lists

#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
int getLength(struct Node* head) {
    int length = 0;
    while (head != NULL) {
        length++;
        head = head->next;
    }
    return length;
}

struct Node* findIntersection(struct Node* list1, struct Node* list2) {
    int len1 = getLength(list1);
    int len2 = getLength(list2);
    
    while (len1 > len2) {
        list1 = list1->next;
        len1--;
    }
    while (len2 > len1) {
        list2 = list2->next;
        len2--;
    }
    while (list1 != NULL && list2 != NULL) {
        if (list1 == list2) {
            return list1; 
        }
        list1 = list1->next;
        list2 = list2->next;
    }

    return NULL; 
}
void printList(struct Node* head)
 {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() 
{
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    struct Node* commonNode = (struct Node*)malloc(sizeof(struct Node));
    commonNode->data = 7;
    
    list1 = (struct Node*)malloc(sizeof(struct Node));
    list1->data = 1;
    list1->next = (struct Node*)malloc(sizeof(struct Node));
    list1->next->data = 3;
    list1->next->next = commonNode;

    list2 = (struct Node*)malloc(sizeof(struct Node));
    list2->data = 2;
    list2->next = commonNode;

    printf("List 1: ");
    printList(list1);
    printf("List 2: ");
    printList(list2);

    struct Node* intersection = findIntersection(list1, list2);
    if (intersection) 
   {
        printf("Intersection found at node with data: %d\n", intersection->data);
    }
 else  {
        printf("No intersection found.\n");
    }
    free(list1);
    free(list2);
    free(commonNode);

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2) Write a C program to divide a singly linked list into two almost equal size lists.
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void appendNode(struct Node** head, int data) 
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

void divideLinkedList(struct Node* source, struct Node** list1, struct Node** list2) {
    if (source == NULL) {
        *list1 = NULL;
        *list2 = NULL;
        return;
    }

    int length = 0;
    struct Node* current = source;
    
    while (current != NULL) 
{
        length++;
        current = current->next;
    }
    int mid = length / 2; 

    *list1 = source; 
    current = source;
    for (int i = 1; i < mid; i++) 
{
        current = current->next;
    }

    *list2 = current->next;
    current->next = NULL;

    if (length % 2 != 0) 
{
        *list2 = (*list2)->next;
    }
}

void printList(struct Node* head)
 {
    while (head != NULL)
 {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

int main() 
{
    struct Node* head = NULL;
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    appendNode(&head, 1);
    appendNode(&head, 2);
    appendNode(&head, 3);
    appendNode(&head, 4);
    appendNode(&head, 5);

    printf("Original Linked List: ");
    printList(head);

    divideLinkedList(head, &list1, &list2);

    printf("List 1: ");
    printList(list1);

    printf("List 2: ");
    printList(list2);
    free(list1);
    free(list2);

    return 0;
}





























